#!/usr/bin/env -S deno run --allow-read --allow-write
// vi: ft=typescript

import { basename, extname } from "jsr:@std/path";
import { walk } from "jsr:@std/fs/walk";

const root = "src/components";
const file = [
  `// This file is generated by build-templates-index.ts`,
  `// Do not edit it manually`,
  `// Run \`deno run --allow-read --allow-write build-templates-index.ts\` to update it`,
  `//`,
  `export const root = "${root}"`,
  ``,
];
const keys: string[] = [] // `  | keyof typeof templateFiles`]
const objects: string[] = []

for await (const dirEntry of walk(root, { exts: ["vto"] })) {
  const relPath = dirEntry.path.slice(root.length + 1);
  const name = basename(relPath, extname(relPath));
  objects.push(`  ${name}: { \n    relPath: "${relPath}",\n    fullPath: "${dirEntry.path}" \n  },`);
  keys.push(`  | "${name}"`)
}

file.push(
  `export type TemplateFileName = `,
  ...keys,
  ``,
  `export const templatesFiles = {`,
  ...objects,
  `} satisfies Record<TemplateFileName, { relPath: string, fullPath: string }>`,
  ``,
);

const asStr = file.join("\n");

await Deno.writeTextFile("src/templatesFiles.ts", asStr);
