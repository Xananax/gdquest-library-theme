<module href="/src/_base.html" locals='{"title":"Entry | Glossary", "bodyclass":"glossaryEntryPage"}'>
	{{ include "/src/components/itemSummaryBrowserHero/itemSummaryBrowserHero.html" }}
	<section class="contentPageGrid">
	{{ include "/src/components/tableOfContents/tableOfContents.html" }}
		<main class="prose">
			<h1 class="hasIconBefore iconApp">Bound Functions</h1>
	
			<p>
				The <code class="language-gdscript">.bind()</code> method creates a
				new copy of a method with arguments already set. This is useful when
				you want to pass a method as an argument to a function but need to
				set some arguments beforehand. It's also useful if you have a
				generic method and know you will always call it with the same
				arguments in certain circumstances.
			</p>
	
			<p>
				This is similar to some uses of a <a href="#">lambda function</a>,
				although there are some technical differences. More on that later.
			</p>
	
			<p>
				Here is an example of using
				<code class="language-gdscript">bind()</code>. We have two buttons
				and we want to connect them to a function that will change the
				current character.
			</p>
	
			<module href="/src/components/codeBlock/codeBlock.html">
@export var speed: float = 100
func _physics_process(delta: float) -> void:
		var velocity: Vector2 = Vector2()
		if Input.is_action_pressed("ui_right"):
			velocity.x += 1
		if Input.is_action_pressed("ui_left"):
			velocity.x -= 1
		if Input.is_action_pressed("ui_down"):
			velocity.y += 1
		if Input.is_action_pressed("ui_up"):
			velocity.y -= 1
		velocity = velocity.normalized() * speed
		position += velocity * delta
		if velocity.length() > 0:
			$AnimatedSprite.play("walk")
		else:
			$AnimatedSprite.play("idle")
			</module>
	
			<p>
				The arguments "Sophia" and "Pink" are bound to the
				<code class="language-gdscript">change_character()</code> function.
				When the buttons are pressed, the
				<code class="language-gdscript">change_character()</code> function
				will be called with the corresponding argument.
			</p>
	
			<p>
				So, writing
				<code class="language-gdscript"
					>change_character.bind("Sophia")</code
				>
				is equivalent to writing a new function that looks like this:
			</p>
	
			<module href="/src/components/codeBlock/codeBlock.html">
@export var speed: float = 100

func _physics_process(delta: float) -> void:
		var velocity: Vector2 = Vector2()
		if Input.is_action_pressed("ui_right"):
			velocity.x += 1
		if Input.is_action_pressed("ui_left"):
			velocity.x -= 1
		if Input.is_action_pressed("ui_down"):
			velocity.y += 1
		if Input.is_action_pressed("ui_up"):
			velocity.y -= 1
		velocity = velocity.normalized() * speed
		position += velocity * delta
		if velocity.length() > 0:
			$AnimatedSprite.play("walk")
		else:
			$AnimatedSprite.play("idle")
			</module>
	
			<p>
				If you have multiple arguments, the bound arguments will be filled
				from right to left.
			</p>
	
			<p>
				For example, if I have two
				<code class="language-gdscript">Area2D</code> nodes representing a
				health pack and a coin. I want to pass this information to the
				function:
			</p>
	
			<module href="/src/components/codeBlock/codeBlock.html">
@export var speed: float = 100

func _physics_process(delta: float) -> void:
		var velocity: Vector2 = Vector2()
		if Input.is_action_pressed("ui_right"):
			velocity.x += 1
		if Input.is_action_pressed("ui_left"):
			velocity.x -= 1
		if Input.is_action_pressed("ui_down"):
			velocity.y += 1
		if Input.is_action_pressed("ui_up"):
			velocity.y -= 1
		velocity = velocity.normalized() * speed
		position += velocity * delta
		if velocity.length() > 0:
			$AnimatedSprite.play("walk")
		else:
			$AnimatedSprite.play("idle")
			</module>
	
			<p>
				The pinned argument "health" or "coin" is inserted at the right.
				When collisions happen, the signal itself fills the
				<code class="language-gdscript">body</code> argument.
			</p>
	
			<p>
				The function returned by
				<code class="language-gdscript">bind()</code> is a new function
				entirely separate from the original.
			</p>
	
			<module href="/src/components/codeBlock/codeBlock.html">
@export var speed: float = 100

func _physics_process(delta: float) -> void:
		var velocity: Vector2 = Vector2()
		if Input.is_action_pressed("ui_right"):
			velocity.x += 1
		if Input.is_action_pressed("ui_left"):
			velocity.x -= 1
		if Input.is_action_pressed("ui_down"):
			velocity.y += 1
		if Input.is_action_pressed("ui_up"):
			velocity.y -= 1
		velocity = velocity.normalized() * speed
		position += velocity * delta
		if velocity.length() > 0:
			$AnimatedSprite.play("walk")
		else:
			$AnimatedSprite.play("idle")
			</module>
	
			{{ include "/src/components/callout/callout.html" }}
	
			<h2>Bound functions and lambdas</h2>
	
			<p>
				Using the <code class="language-gdscript">bind()</code> method or
				<a href="#">lambda functions</a> is not strictly equivalent. There
				are technical differences between the two that are surprising.
			</p>
	
			<p>
				The <code class="language-gdscript">bind()</code> method prefills
				the values you give it as arguments. It immediately _evaluates_
				whatever variable you give it.
			</p>
	
			<module href="/src/components/codeBlock/codeBlock.html">
@export var speed: float = 100

func _physics_process(delta: float) -> void:
		var velocity: Vector2 = Vector2()
		if Input.is_action_pressed("ui_right"):
			velocity.x += 1
		if Input.is_action_pressed("ui_left"):
			velocity.x -= 1
		if Input.is_action_pressed("ui_down"):
			velocity.y += 1
		if Input.is_action_pressed("ui_up"):
			velocity.y -= 1
		velocity = velocity.normalized() * speed
		position += velocity * delta
		if velocity.length() > 0:
			$AnimatedSprite.play("walk")
		else:
			$AnimatedSprite.play("idle")
			</module>
	
			<p>
				On the other hand, lambdas don't always do that. They behave a bit
				differently depending on the variables you access inside of them:
			</p>
	
			<ol>
				<li>
					If you access a script-wide variable inside a lambda, the lambda
					will keep a reference to this variable. It will not evaluate the
					variable immediately; it will evaluate it when the lambda is
					called.
				</li>
				<li>
					If you access a local variable in a lambda function, the lambda
					will evaluate the value immediately. It will not keep a
					reference to the variable to evaluate later because the variable
					will be destroyed when the function creating the lambda exits.
				</li>
			</ol>
	
			<p>
				So, if we use a lambda function instead of
				<code class="language-gdscript">bind()</code> in the example above,
				we get a different result:
			</p>
	
			<module href="/src/components/codeBlock/codeBlock.html">
@export var speed: float = 100

func _physics_process(delta: float) -> void:
		var velocity: Vector2 = Vector2()
		if Input.is_action_pressed("ui_right"):
			velocity.x += 1
		if Input.is_action_pressed("ui_left"):
			velocity.x -= 1
		if Input.is_action_pressed("ui_down"):
			velocity.y += 1
		if Input.is_action_pressed("ui_up"):
			velocity.y -= 1
		velocity = velocity.normalized() * speed
		position += velocity * delta
		if velocity.length() > 0:
			$AnimatedSprite.play("walk")
		else:
			$AnimatedSprite.play("idle")
			</module>
	
		{{ include "/src/components/glossarySeeAlsoBlock/glossarySeeAlsoBlock.html" }}
		</main>
		{{ include "/src/components/itemPageMeta/itemPageMeta.html" }}
	</section>
	{{ include "/src/components/contributeBlock/contributeBlock.html" }}
	
</module>
