@use "sass:math";
@use "./utils.scss" as *;

@function toRem($value) {
  $remValue: math.div($value, 16) * 1rem;
  @return $remValue;
}

@function no-unit($number) {
  @return math.div($number, ($number * 0 + 1));
}

/////////////////////////////////// SMALL SIZE ///////////////////////////////////

$small-marginLeft-min: toRem(40);
$small-marginLeft-max: toRem(160);

$small-nav: 0rem;

$small-gutterLeft: 0rem;

$small-main-min-min: toRem(240);
$small-main-min-flexible: max($small-main-min-min, 80%);
$small-main-max: 1fr;

$small-actions: 0rem;

$small-meta: 0rem;

$small-marginRight-min: $small-marginLeft-min;
$small-marginRight-max: $small-marginLeft-max;

$small-breakpoint: calc(
  $small-marginLeft-min + $small-nav + $small-gutterLeft + $small-main-min-min +
    $small-actions + $small-meta + $small-marginRight-min
);

/////////////////////////////////// MEDIUM SIZE ///////////////////////////////////

$sideBarWidthMin: toRem(220);
$sideBarWidthMax: toRem(400);

$mid-marginLeft-min: toRem(160);
$mid-marginLeft-max: auto;

$mid-nav-min: 0rem;
$mid-nav-max: $sideBarWidthMax;

$mid-gutterLeft-min: 0rem;
$mid-gutterLeft-max: toRem(95);

$mid-main-min: toRem(660);
$mid-main-max: toRem(1000);

$mid-actions-min: $mid-marginLeft-min;
$mid-actions-max: toRem(160);

$mid-meta-min: toRem(330);
$mid-meta-max: toRem(400);

$mid-marginRight-min: toRem(130);
$mid-marginRight-max: auto;

$mid-breakpoint: calc(
  $mid-marginLeft-min + $mid-nav-min + $mid-gutterLeft-min + $mid-main-min +
    $mid-actions-min + $mid-meta-min + $mid-marginRight-min
);
$large-breakpoint: calc($mid-breakpoint + $sideBarWidthMin);

@debug "breakpoints: #{calc(no-unit($small-breakpoint) * 16px)}, #{calc(no-unit($mid-breakpoint) * 16px)}, #{calc(no-unit($large-breakpoint) * 16px)}";

@mixin gridSmall() {
  grid-template-columns:
    minmax($small-marginLeft-min, $small-marginLeft-max)
    $small-nav
    minmax($small-main-min-flexible, $small-main-max)
    minmax($small-marginRight-min, $small-marginRight-max);
  grid-template-areas:
    "marginLeft nav actions marginRight"
    "marginLeft nav main marginRight"
    "marginLeft nav meta marginRight";
  row-gap: 2rem;
}

@mixin gridMid($_sideBarWidth) {
  grid-template-columns:
    minmax($mid-marginLeft-min, $mid-marginLeft-max)
    minmax($_sideBarWidth, $mid-nav-max)
    minmax($mid-gutterLeft-min, $mid-gutterLeft-max)
    minmax($mid-main-min, $mid-main-max)
    minmax($mid-actions-min, $mid-actions-max)
    minmax($mid-meta-min, $mid-meta-max)
    minmax($mid-marginRight-min, $mid-marginRight-min);
  grid-template-areas: "marginLeft nav gutterLeft main actions meta marginRight";
  row-gap: 0;
}

@mixin gridLarge() {
  grid-template-columns:
    minmax($mid-marginLeft-min, $mid-marginLeft-max)
    minmax($mid-nav-min, $mid-nav-max)
    minmax($mid-gutterLeft-min, $mid-gutterLeft-max)
    minmax($mid-main-min, $mid-main-max)
    minmax($mid-actions-min, $mid-actions-max)
    minmax($mid-meta-min, $mid-meta-max)
    minmax($mid-marginRight-min, $mid-marginRight-min);
}

@mixin contentGrid() {
  @include gridSmall();
  justify-content: center;
  @media (min-width: $mid-breakpoint) {
    @include gridMid($mid-nav-min);
  }
  @media (min-width: $large-breakpoint) {
    @include gridMid($sideBarWidthMin);
    transition: grid-template-columns 300ms ease-in-out;
    @at-root .tableOfContentsSideBarIsClosed #{&} {
      @include gridMid($mid-nav-min);
    }
  }
}
