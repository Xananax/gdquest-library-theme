@use "sass:math";
@use "./utils.scss" as *;

@function no-unit($number) {
  @return math.div($number, ($number * 0 + 1));
}

/////////////////////////////////// SMALL SIZE ///////////////////////////////////

$small-marginLeft-min: toRem(40);
$small-marginLeft-max: toRem(160);

$small-nav: toRem(0);

$small-gutterLeft: toRem(0);

$small-main-min-min: toRem(240);
$small-main-min-flexible: max($small-main-min-min, 80%);
$small-main-max: 1fr;

$small-actions: toRem(0);

$small-meta: toRem(0);

$small-marginRight-min: $small-marginLeft-min;
$small-marginRight-max: $small-marginLeft-max;

$small-breakpoint: calc(
  $small-marginLeft-min + $small-nav + $small-gutterLeft + $small-main-min-min +
    $small-actions + $small-meta + $small-marginRight-min
);

@mixin gridSmall() {
  grid-template-columns:
    $small-nav
    minmax($small-marginLeft-min, $small-marginLeft-max)
    minmax($small-main-min-flexible, $small-main-max)
    minmax($small-marginRight-min, $small-marginRight-max);
  grid-template-areas:
    "nav marginLeft actions marginRight"
    "nav marginLeft main marginRight"
    "nav marginLeft meta marginRight";
  row-gap: 2rem;
}

/////////////////////////////////// MEDIUM SIZE ///////////////////////////////////

$mid-nav-min: toRem(300);
$mid-nav-max: toRem(300);

$mid-marginLeft-min: toRem(40);//toRem(160);
$mid-marginLeft-max: 1fr;

$mid-main-min: toRem(660);
$mid-main-max: toRem(660);

$mid-actions-min: toRem(60);//$mid-marginLeft-min;
$mid-actions-max: 1fr;

$mid-meta-min: toRem(330);
$mid-meta-max: toRem(330);

$mid-marginRight-min: toRem(40);//toRem(130);
$mid-marginRight-max: 1fr;

$sideBarWidthMin: toRem(330);
$sideBarWidthMax: toRem(510);

$mid-breakpoint: calc(
  $mid-nav-min + $mid-marginLeft-min + $mid-main-min +
    $mid-actions-min + $mid-meta-min + $mid-marginRight-min
);
$large-breakpoint: calc($mid-breakpoint + $sideBarWidthMin);

@mixin gridMid($navWidth) {
  grid-template-columns:
    $navWidth
    minmax($mid-marginLeft-min, $mid-marginLeft-max)
    minmax($mid-main-min, $mid-main-max)
    minmax($mid-actions-min, $mid-actions-max)
    minmax($mid-meta-min, $mid-meta-max)
    minmax($mid-marginRight-min, $mid-marginRight-max);
  grid-template-areas: "nav marginLeft main actions meta marginRight";
  row-gap: 0;
}

/////////////////////////////////// LARGE SIZE ///////////////////////////////////

$large-nav-min: toRem(400);
$large-nav-max: toRem(400);

$large-marginLeft-min: toRem(95);
$large-marginLeft-max: 1fr;

$large-main-min: toRem(800);
$large-main-max: toRem(800);

$large-actions-min: toRem(160);//$mid-marginLeft-min;
$large-actions-max: 1fr;

$large-meta-min: toRem(400);
$large-meta-max: toRem(400);

$large-marginRight-min: toRem(65);//toRem(130);
$large-marginRight-max: 1fr;

$largeSideBarWidthMin: toRem(320);
$largeSideBarWidthMax: toRem(530);

$large-breakpoint: calc(
  $large-nav-min + $large-marginLeft-min + $large-main-min +
    $large-actions-min + $large-meta-min + $large-marginRight-min
);
$extralarge-breakpoint: calc($large-breakpoint + $largeSideBarWidthMin);

@mixin gridLarge($navWidth) {
  grid-template-columns:
    $navWidth
    minmax($large-marginLeft-min, $large-marginLeft-max)
    minmax($large-main-min, $large-main-max)
    minmax($large-actions-min, $large-actions-max)
    minmax($large-meta-min, $large-meta-max)
    minmax($large-marginRight-min, $large-marginRight-max);
}

/////////////////////////////////// EXTRA LARGE SIZE ///////////////////////////////////

$extralarge-nav-min: toRem(530);
$extralarge-nav-max: toRem(530);

$extralarge-marginLeft-min: toRem(250);
$extralarge-marginLeft-max: 1fr;

$extralarge-main-min: toRem(1000);
$extralarge-main-max: toRem(1000);

$extralarge-actions-min: toRem(250);
$extralarge-actions-max: 1fr;

$extralarge-meta-min: toRem(480);
$extralarge-meta-max: toRem(480);

$extralarge-marginRight-min: toRem(65);//toRem(130);
$extralarge-marginRight-max: 1fr;

$extralargeSideBarWidthMin: toRem(320);

@mixin gridExtraLarge($navWidth) {
  grid-template-columns:
    $navWidth
    minmax($extralarge-marginLeft-min, $extralarge-marginLeft-max)
    minmax($extralarge-main-min, $extralarge-main-max)
    minmax($extralarge-actions-min, $extralarge-actions-max)
    minmax($extralarge-meta-min, $extralarge-meta-max)
    minmax($extralarge-marginRight-min, $extralarge-marginRight-max);
}

$final-possible-size: calc($extralarge-nav-max + $extralarge-marginLeft-min + $extralarge-main-max +
$extralarge-actions-min + $extralarge-meta-max + $extralarge-marginRight-min);

/////////////////////////////////// EXTRA LARGE SIZE ///////////////////////////////////

@debug "breakpointsREM: #{$small-breakpoint}, #{$mid-breakpoint}, #{$large-breakpoint}, #{$extralarge-breakpoint}";
@debug "breakpointsPX: #{calc(no-unit($small-breakpoint) * 16px)}, #{calc(no-unit($mid-breakpoint) * 16px)}, #{calc(no-unit($large-breakpoint) * 16px), #{calc(no-unit($extralarge-breakpoint) * 16px)}}";

/////////////////////////////////// EXTRA LARGE SIZE ///////////////////////////////////

@mixin contentGrid() {
  justify-content: center;
  transition: grid-template-columns 200ms ease-in-out;
  max-width: $final-possible-size;
  margin-inline: auto;
  @include gridSmall();
  @media (min-width: $mid-breakpoint) {
    @include gridMid($sideBarWidthMin);
    @at-root .tableOfContentsSideBarIsClosed #{&} {
      @include gridMid(toRem(0));
    }
  }
  @media (min-width: $large-breakpoint) {
    @include gridLarge($largeSideBarWidthMin);
    @at-root .tableOfContentsSideBarIsClosed #{&} {
      @include gridLarge(toRem(0));
    }
  }
  @media (min-width: $extralarge-breakpoint) {
    @include gridExtraLarge($extralargeSideBarWidthMin);
    @at-root .tableOfContentsSideBarIsClosed #{&} {
      @include gridExtraLarge(toRem(0));
    }
  }
}
