// TODO: Generate these from the actual entries
export const glossaryListTerms = Object.entries(
  [
    ["AI Blackboard", "ai_blackboard"],
    ["AI (Games)", "ai_in_games"],
    ["Radians (angle)", "angle_radians"],
    ["Annotations", "annotation"],
    ["API", "api"],
    ["Architecture", "architecture"],
    ["Array", "array"],
    ["Autoload", "autoload"],
    ["Backend", "backend"],
    ["Basis", "basis"],
    ["BBCode", "bbcode"],
    ["Best Practices for Code", "best_code"],
    ["Billboard", "billboard"],
    ["Bit Flags", "bit_flags"],
    ["Boolean Expression", "boolean_expression"],
    ["Bound Check", "bound_check"],
    ["Inner Class", "class_inner"],
    ["Class Keyword", "class_keyword"],
    ["Closure", "closure"],
    ["Code Blocks", "code_blocks"],
    ["Collision Layers and Masks", "collision_layers_and_masks"],
    ["Collision", "collision"],
    ["Command Line", "command_line"],
    ["Composition", "composition"],
    ["Constant", "constant"],
    ["Constructor", "constructor"],
    ["Copy, Customize, Create", "copy_customize_create"],
    ["Coupling", "coupling"],
    ["Custom Constructor", "custom_constructor"],
    ["Data Structure", "data_structure"],
    ["Data", "data"],
    ["Delta Time", "delta_time"],
    ["Dependency", "dependency"],
    ["Design Pattern", "design_pattern"],
    ["Deterministic Simulation", "deterministic_simulation"],
    ["Dialog/Dialogue", "dialog_or_dialogue"],
    ["Dictionary", "dictionary"],
    ["Don't Repeat Yourself", "dont_repeat_yourself"],
    ["Dot Product", "dot_product"],
    ["Draw Order", "draw_order"],
    ["DRY Principle", "dry"],
    ["Duck Typing", "duck_typing"],
    ["Dynamic vs Static Typing", "dynamic_static_weak_strong"],
    ["Early Return", "early_return"],
    ["Easing", "easing"],
    ["Editor Tooling", "editor_tooling"],
    ["Encapsulation", "encapsulation"],
    ["Programming Errors", "error_programming"],
    ["Expression", "expression"],
    ["Field of View", "field_of_view"],
    ["Sound File Formats", "file_format_sounds"],
    ["Finite State Machine State", "finite_state_machine_state"],
    ["Finite State Machine", "finite_state_machine"],
    ["Floating Point Rounding Error", "floating_point_rounding_error"],
    ["Fluent Interface", "fluent_interface"],
    ["Footgun", "footgun"],
    ["SVG Format", "format_svg"],
    ["Forward Direction", "forward_direction"],
    ["Framerate Independence", "framerate_independence"],
    ["Frames Per Second", "frames_per_second"],
    ["Framework", "framework"],
    ["Bound Function", "function_bound"],
    ["Function Call vs Reference", "function_call_vs_function_reference"],
    ["Initialize Function", "function_init"],
    ["Function Keyword", "function_keyword"],
    ["Lambda Function", "function_lambda"],
    ["Override Function", "function_override"],
    ["Physics Process Function", "function_physics_process"],
    ["Process Function", "function_process"],
    ["Pure Function", "function_pure"],
    ["Return Function", "function_return"],
    ["Function Signature", "function_signature"],
    ["Static Function", "function_static"],
    ["Virtual Function", "function_virtual"],
    ["Functional Programming", "functional_programming"],
    ["Game States", "game_states"],
    ["Game Jam", "gamejam"],
    ["Hexadecimal", "hexadecimal"],
    ["Indentation", "indentation"],
    ["Indirection", "indirection"],
    ["Inheritance", "inheritance"],
    ["Instance", "instance"],
    ["Instruction", "instruction"],
    ["API Interface", "interface_api"],
    ["Interface-Driven Design", "interface_driven_design"],
    ["Interpolation", "interpolation"],
    ["Juicing", "juicing"],
    ["Keyframe", "keyframe"],
    ["Await Keyword", "keyword_await"],
    ["Language Identifier", "language_identifier"],
    ["Language Token", "language_token"],
    ["Node Lifecycle", "lifecycle_node"],
    ["Lifecycle Term", "lifecycle_term"],
    ["Logic Programming", "logic_programming"],
    ["Low-Level Programming", "low_level_programming"],
    ["Main Loop", "main_loop"],
    ["Material", "material"],
    ["Method", "method"],
    ["Modulo", "modulo"],
    ["Naming Conventions", "naming"],
    ["Nine-Slice Scaling", "nine_slice_scaling"],
    ["Node", "node"],
    ["Normal", "normal"],
    ["Object-Oriented Programming", "object_oriented_programming"],
    ["Object", "object"],
    ["OpenGL", "opengl"],
    ["Operator", "operator"],
    ["Declarative Paradigm", "paradigm_declarative"],
    ["Imperative Paradigm", "paradigm_imperative"],
    ["Parameter", "parameter"],
    ["Particle System", "particle_system"],
    ["Pathfinding", "pathfinding"],
    ["PEBKAC", "pebkac"],
    ["Polar Coordinates", "polar_coordinates"],
    ["Pragmatic Programming", "pragmatic_programming"],
    ["Premature Optimization", "premature_optimization"],
    ["Private & Public Properties", "private_public_properties"],
    ["Property", "property"],
    ["Pseudo-Code", "pseudo_code"],
    ["Race Condition", "race_condition"],
    ["Raycast", "raycast"],
    ["Refactor", "refactor"],
    ["Reference Counting", "reference_counting"],
    ["Resource", "resource"],
    ["Runtime", "runtime"],
    ["Scene Tree", "scene_tree"],
    ["Scene", "scene"],
    ["Scope", "scope"],
    ["Script", "script"],
    ["Serialization", "serialization"],
    ["Setter & Getter", "setter_getter"],
    ["Shader", "shader"],
    ["Side Effect", "side_effect"],
    ["Signal", "signal"],
    ["Singleton", "singleton"],
    ["Sprite", "sprite"],
    ["State", "state"],
    ["Statement", "statement"],
    ["Static Variable", "static_variable"],
    ["Steering Behaviors", "steering_behaviors"],
    ["String", "string"],
    ["Stylebox", "stylebox"],
    ["Super Keyword", "super_keyword"],
    ["Ternary Expression", "ternary_expression"],
    ["Test-Driven Design", "test_driven_design"],
    ["Theme", "theme"],
    ["Tonemap", "tonemap"],
    ["Transform", "transform"],
    ["Transition", "transition"],
    ["Truthy & Falsy Values", "truthy_falsy"],
    ["Tunneling", "tunneling"],
    ["Tween", "tween"],
    ["Type Casting", "type_casting"],
    ["Type Coercion", "type_coercion"],
    ["Generic Type", "type_generic"],
    ["Type Inference", "type_inference"],
    ["Type", "type"],
    ["Variable", "variable"],
    ["Vector", "vector"],
    ["Velocity", "velocity"],
    ["Version Control System", "version_control_system"],
    ["Viewport", "viewport"],
    ["Virtual Class", "virtual_class"],
    ["Void Keyword", "void_keyword"],
    ["Your Future Self", "your_future_self"],
  ].reduce((dict: Record<string, [string, string][]>, [term, id]) => {
    const firstLetter = term[0].toLowerCase();
    if (!dict[firstLetter]) {
      dict[firstLetter] = [];
    }
    dict[firstLetter].push([term, id]);
    return dict;
  }, {
    "a": [],
    "b": [],
    "c": [],
    "d": [],
    "e": [],
    "f": [],
    "g": [],
    "h": [],
    "i": [],
    "j": [],
    "k": [],
    "l": [],
    "m": [],
    "n": [],
    "o": [],
    "p": [],
    "q": [],
    "r": [],
    "s": [],
    "t": [],
    "u": [],
    "v": [],
    "w": [],
    "x": [],
    "y": [],
    "z": [],
  })
);